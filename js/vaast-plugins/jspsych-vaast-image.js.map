{"version":3,"file":"index.browser.js","sources":["../package.json","../src/index.ts"],"sourcesContent":["{\n  \"name\": \"@jspsych-contrib/plugin-vaast-image\",\n  \"version\": \"0.0.1\",\n  \"description\": \"The VAAST-image plugin displays a single trial with an image stimulus appearing on a background image. The participant has to either approach or avoid the image stimulus shown on the screen, depending on the instructions. They respond by pressing one key or another. The scene changes accordingly. This plugin is used in VAAST (Visual Approach and Avoidance by the Self Task) experiments.\",\n  \"type\": \"module\",\n  \"main\": \"dist/index.cjs\",\n  \"exports\": {\n    \"import\": \"./dist/index.js\",\n    \"require\": \"./dist/index.cjs\"\n  },\n  \"typings\": \"dist/index.d.ts\",\n  \"unpkg\": \"dist/index.browser.min.js\",\n  \"files\": [\n    \"src\",\n    \"dist\"\n  ],\n  \"source\": \"src/index.ts\",\n  \"scripts\": {\n    \"test\": \"jest\",\n    \"test:watch\": \"npm test -- --watch\",\n    \"tsc\": \"tsc\",\n    \"build\": \"rollup --config\",\n    \"build:watch\": \"npm run build -- --watch\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/jspsych/jspsych-contrib.git\",\n    \"directory\": \"packages/plugin-vaast-image\"\n  },\n  \"author\": {\n    \"name\": \"Cédric Batailler\",\n    \"url\": \"https://github.com/cedricbatailler\"\n  },\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/jspsych/jspsych-contrib/issues\"\n  },\n  \"homepage\": \"https://github.com/jspsych/jspsych-contrib/tree/main/packages/plugin-vaast-image\",\n  \"peerDependencies\": {\n    \"jspsych\": \">=8.0.0\"\n  },\n  \"devDependencies\": {\n    \"@jspsych/config\": \"^3.2.2\",\n    \"@jspsych/test-utils\": \"^1.0.0\",\n    \"jspsych\": \"^8.0.0\"\n  }\n}\n","import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"vaast-image\",\n  version: version,\n  parameters: {\n    /**\n     * The image to be displayed.\n     */\n    stimulus: {\n      type: ParameterType.IMAGE,\n      pretty_name: \"Stimulus\",\n      default: undefined,\n    },\n    /**\n     * The key press associated with an approach movement.\n     */\n    approach_key: {\n      type: ParameterType.KEY,\n      pretty_name: \"Approach key\",\n      default: \"Z\",\n    },\n    /**\n     * The key press associated with an avoidance movement.\n     */\n    avoidance_key: {\n      type: ParameterType.KEY,\n      pretty_name: \"Avoidance key\",\n      default: \"S\",\n    },\n    /**\n     * This array contains the key(s) that the participant is allowed to press in order to advance to the next trial\n     * if their key press was incorrect. Keys should be specified as characters (e.g., `'a'`, `'q'`, `' '`, `'Enter'`, `'ArrowDown'`) - see\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/UI_Events/Keyboard_event_key_values this page}\n     * and\n     * {@link https://www.freecodecamp.org/news/javascript-keycode-list-keypress-event-key-codes/ this page (event.key column)}\n     * for more examples. Any key presses that are not listed in the array will be ignored.\n     * The default value of `\"ALL_KEYS\"` means that all keys will be accepted as valid responses.\n     * Specifying `\"NO_KEYS\"` will mean that no responses are allowed.\n     */\n    key_to_move_forward: {\n      type: ParameterType.KEYS,\n      pretty_name: \"Key to move forward\",\n      default: \"ALL_KEYS\",\n    },\n    /**\n     * If true, then the code included in 'html_when_wrong' will be displayed when the user makes an incorrect key press.\n     */\n    display_feedback: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Display feedback\",\n      default: false,\n    },\n    /**\n     * How long the feedback is shown (in ms).\n     */\n    feedback_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Feedback duration\",\n      default: null,\n    },\n    /**\n     * The content to display when a user presses the wrong key.\n     */\n    html_when_wrong: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"HTML when wrong\",\n      default: '<span style=\"color: red; font-size: 80px\">X</span>',\n    },\n    /**\n     * If true, the user will be forced to press the correct key in order to advance to the next trial after a wrong key press.\n     */\n    force_correct_key_press: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Force correct key press\",\n      default: false,\n    },\n    /**\n     * The movement associated with the stimulus (either \"approach\" or \"avoidance\").\n     */\n    stim_movement: {\n      type: ParameterType.STRING,\n      pretty_name: \"Stimulus movement association\",\n      options: [\"approach\", \"avoidance\"],\n      default: undefined,\n    },\n    /**\n     * An array with the sizes of the image as function of the position.\n     * The medium font corresponds to the stimulus font size when it's first presented.\n     * The smaller and larger fonts correspond to the stimulus font size when the movement is avoidance and approach, respectively.\n     */\n    font_sizes: {\n      type: ParameterType.INT,\n      array: true,\n      pretty_name: \"Stimulus size\",\n      default: null,\n    },\n    /**\n     * If true, then the trial will end whenever the participant makes a response\n     * (assuming they make their response before the cutoff specified by the trial_duration parameter).\n     * If false, then the trial will continue until the value for trial_duration is reached.\n     * For example, set this parameter to false for trials where the participant sees the visual changes caused by the chosen movement.\n     */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Response ends trial\",\n      default: true,\n    },\n    /**\n     * How long to wait for the participant to make a response before ending the trial in milliseconds.\n     * If the value of this parameter is `null`, then the trial will wait for a response indefinitely.\n     */\n    trial_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Trial duration\",\n      default: null,\n    },\n    /**\n     * An array with the images displayed as background as function of the position.\n     */\n    background_images: {\n      type: ParameterType.IMAGE,\n      array: true,\n      pretty_name: \"Background\",\n      default: undefined,\n    },\n    /**\n     * The position in the \"background_images\" array which will be used to set the background (and the stimulus size).\n     */\n    position: {\n      type: ParameterType.INT,\n      pretty_name: \"Initial position\",\n      default: 3,\n    },\n  },\n  data: {\n    /**\n     * The path to the image file that was displayed on the screen.\n     */\n    stimulus: {\n      type: ParameterType.STRING,\n    },\n    /**\n     * Indicates which key that the participant pressed.\n     */\n    response: {\n      type: ParameterType.STRING,\n    },\n    /**\n     * Boolean indicating whether the user's key press was correct or incorrect for the given stimulus.\n     */\n    correct: {\n      type: ParameterType.BOOL,\n    },\n    /**\n     * The response time in milliseconds for the participant to make a response.\n     * The time is measured from when the stimulus first appears on the screen until the participant's response.\n     */\n    rt: {\n      type: ParameterType.INT,\n    },\n    /**\n     * The movement associated with the stimulus.\n     */\n    movement: {\n      type: ParameterType.STRING,\n    },\n    /**\n     * The position in the \"background_images\" array used to set the background and the stimulus size.\n     */\n    position: {\n      type: ParameterType.INT,\n    },\n  },\n  // prettier-ignore\n  citations: '__CITATIONS__',\n};\n\ntype Info = typeof info;\n\n/**\n * **vaast-image**\n *\n * The VAAST-image plugin displays a single trial with an image stimulus appearing on a background image.\n * The participant has to either approach or avoid the image stimulus shown on the screen, depending on the instructions.\n * They respond by pressing one key or another. The scene changes accordingly.\n * This plugin is used in VAAST (Visual Approach and Avoidance by the Self Task) experiments.\n *\n * @author Cédric Batailler\n * @see {@link https://github.com/jspsych/jspsych-contrib/packages/plugin-vaast-image/README.md}}\n */\nclass VaastImagePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    let html_str = \"\";\n\n    const position = trial.position ?? 3;\n\n    html_str +=\n      \"<div style='position: absolute; right: 0; top: 0; width: 100%; height: 100%; background: url(\" +\n      trial.background_images[trial.position] +\n      \") center no-repeat; background-color: #000000'></div>\";\n    html_str +=\n      \"<div style='position: relative; right: 0; top:0; width: \" +\n      trial.font_sizes[trial.position] +\n      \"px'><img width='\" +\n      trial.font_sizes[trial.position] +\n      \"' src='\" +\n      trial.stimulus +\n      \"' id='jspsych-vaast-stim'></img></div>\";\n\n    html_str +=\n      \"<div id='wrongImgID' style='position: relative; top: 150px; margin-left: auto; margin-right: auto; left: 0; right: 0'>\";\n\n    if (trial.display_feedback === true) {\n      html_str +=\n        \"<div id='wrongImgContainer' style='visibility: hidden; position: absolute; top: -75px; margin-left: auto; margin-right: auto; left: 0; right: 0'><p>\" +\n        trial.html_when_wrong +\n        \"</p></div>\";\n    }\n\n    html_str += \"</div>\";\n\n    display_element.innerHTML = html_str;\n\n    // store response\n    let response = {\n      rt: null,\n      key: null,\n      correct: false,\n    };\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      // kill keyboard listeners\n      if (typeof keyboardListener !== \"undefined\") {\n        this.jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n      }\n\n      // gather the data to store for the trial\n      let trial_data = {\n        rt: response.rt,\n        stimulus: trial.stimulus,\n        key_press: response.key,\n        correct: response.correct,\n        movement: trial.stim_movement,\n        position: trial.position,\n      };\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    const approach_key = trial.approach_key ?? \"Z\";\n    const avoidance_key = trial.avoidance_key ?? \"S\";\n\n    // function to handle responses by the subject\n    const after_response = (info) => {\n      let wImg = document.getElementById(\"wrongImgContainer\");\n      // after a valid response, the stimulus will have the CSS class 'responded'\n      // which can be used to provide visual feedback that a response was recorded\n      display_element.querySelector(\"#jspsych-vaast-stim\").className += \" responded\";\n\n      // only record the first response\n      if (response.key == null) {\n        response = info;\n      }\n\n      if (trial.stim_movement == \"avoidance\") {\n        if (\n          response.rt !== null &&\n          this.jsPsych.pluginAPI.compareKeys(response.key, avoidance_key)\n        ) {\n          response.correct = true;\n          if (trial.response_ends_trial) {\n            end_trial();\n          }\n        } else {\n          response.correct = false;\n          if (!trial.response_ends_trial && trial.display_feedback == true) {\n            wImg.style.visibility = \"visible\";\n          }\n          if (\n            trial.response_ends_trial &&\n            trial.display_feedback == true &&\n            trial.feedback_duration !== null\n          ) {\n            wImg.style.visibility = \"visible\";\n            this.jsPsych.pluginAPI.setTimeout(() => {\n              end_trial();\n            }, trial.feedback_duration);\n          }\n          if (\n            trial.response_ends_trial &&\n            trial.display_feedback == true &&\n            trial.feedback_duration == null\n          ) {\n            wImg.style.visibility = \"visible\";\n            if (trial.force_correct_key_press) {\n              let keyListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n                callback_function: end_trial,\n                valid_responses: [avoidance_key],\n              });\n            } else {\n              let keyListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n                callback_function: end_trial,\n                valid_responses: trial.key_to_move_forward,\n              });\n            }\n          } else if (trial.response_ends_trial && trial.display_feedback != true) {\n            end_trial();\n          } else if (!trial.response_ends_trial && trial.display_feedback != true) {\n          }\n        }\n      } else if (trial.stim_movement == \"approach\") {\n        if (\n          response.rt !== null &&\n          this.jsPsych.pluginAPI.compareKeys(response.key, approach_key)\n        ) {\n          response.correct = true;\n          if (trial.response_ends_trial) {\n            end_trial();\n          }\n        } else {\n          response.correct = false;\n          if (!trial.response_ends_trial && trial.display_feedback == true) {\n            wImg.style.visibility = \"visible\";\n          }\n          if (\n            trial.response_ends_trial &&\n            trial.display_feedback == true &&\n            trial.feedback_duration !== null\n          ) {\n            wImg.style.visibility = \"visible\";\n            this.jsPsych.pluginAPI.setTimeout(() => {\n              end_trial();\n            }, trial.feedback_duration);\n          }\n          if (\n            trial.response_ends_trial &&\n            trial.display_feedback == true &&\n            trial.feedback_duration == null\n          ) {\n            wImg.style.visibility = \"visible\";\n            if (trial.force_correct_key_press) {\n              let keyListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n                callback_function: end_trial,\n                valid_responses: [approach_key],\n              });\n            } else {\n              let keyListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n                callback_function: end_trial,\n                valid_responses: trial.key_to_move_forward,\n              });\n            }\n          } else if (trial.response_ends_trial && trial.display_feedback != true) {\n            end_trial();\n          } else if (!trial.response_ends_trial && trial.display_feedback != true) {\n          }\n        }\n      }\n    };\n\n    // start the response listener\n    if (approach_key != \"NO_KEYS\" && avoidance_key != \"NO_KEYS\") {\n      var keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: after_response,\n        valid_responses: [approach_key, avoidance_key],\n        rt_method: \"performance\",\n        persist: false,\n        allow_held_key: false,\n      });\n    }\n\n    // end trial if time limit is set\n    if (trial.trial_duration !== null && trial.response_ends_trial != true) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        end_trial();\n      }, trial.trial_duration);\n    }\n  }\n}\n\nexport default VaastImagePlugin;\n"],"names":[],"mappings":";;;EAEE,IAAW,OAAA,GAAA,OAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IC+KA,SAAA,EAAA;EAAA;;KAAe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}